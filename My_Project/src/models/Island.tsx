/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 /Users/caokaixiang/Downloads/3D_portfolio-main/my_project/src/assets/3d/island.glb -T 
Files: /Users/caokaixiang/Downloads/3D_portfolio-main/my_project/src/assets/3d/island.glb [356.4KB] > /Users/caokaixiang/Downloads/3D_portfolio-main/my_project/src/models/island-transformed.glb [130KB] (64%)
Author: nimzu (https://sketchfab.com/nimzuk)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/foxs-islands-163b68e09fcc47618450150be7785907
Title: Fox's islands
*/

import { animated as a, useSpring } from "@react-spring/three";
import { useEffect, useRef, useCallback, useState } from "react";
import { useGLTF } from "@react-three/drei";
import { useFrame, useThree } from "@react-three/fiber";
import * as THREE from "three";

interface PhysicsConfig {
  damping: number;
  tension: number;
  friction: number;
  mass: number;
  velocity: number;
  precision: number;
}

interface InteractionConfig {
  sensitivity: number;
  keyboardSpeed: number;
  autoRotateSpeed: number;
  snapToStages: boolean;
  enableHapticFeedback: boolean;
  enableSoundEffects: boolean;
}

interface IslandProps {
  isRotating: boolean;
  setIsRotating: (rotating: boolean) => void;
  setCurrentStage: (stage: number | null) => void;
  currentFocusPoint?: THREE.Vector3;
  
  // Physics
  physicsConfig?: Partial<PhysicsConfig>;
  interactionConfig?: Partial<InteractionConfig>;
  
  // 3D 
  position?: [number, number, number];
  rotation?: [number, number, number];
  scale?: [number, number, number];
  
  enableAutoRotate?: boolean;
  enableMagneticSnap?: boolean;
  enableParallax?: boolean;
}

interface GLTFResult {
  nodes: {
    polySurface944_tree_body_0: THREE.Mesh;
    polySurface945_tree1_0: THREE.Mesh;
    polySurface946_tree2_0: THREE.Mesh;
    polySurface947_tree1_0: THREE.Mesh;
    polySurface948_tree_body_0: THREE.Mesh;
    polySurface949_tree_body_0: THREE.Mesh;
    pCube11_rocks1_0: THREE.Mesh;
  };
  materials: {
    PaletteMaterial001: THREE.Material;
  };
}

export function Island({
  isRotating,
  setIsRotating,
  setCurrentStage,
  physicsConfig = {},
  interactionConfig = {},
  enableAutoRotate = false,
  enableMagneticSnap = true,
  enableParallax = false,
  ...props
}: IslandProps) {
  const islandRef = useRef<THREE.Group>(null);
  const { gl, viewport, camera } = useThree();
  const { nodes, materials } = useGLTF("/island-transformed.glb") as unknown as GLTFResult;

  const physics: PhysicsConfig = {
    damping: 0.95,
    tension: 120,
    friction: 14,
    mass: 1,
    velocity: 0,
    precision: 0.001,
    ...physicsConfig,
  };

  const interaction: InteractionConfig = {
    sensitivity: 0.01,
    keyboardSpeed: 0.005,
    autoRotateSpeed: 0.002,
    snapToStages: true,
    enableHapticFeedback: true,
    enableSoundEffects: false,
    ...interactionConfig,
  };

  const [isHovered, setIsHovered] = useState(false);
  const [isDragging, setIsDragging] = useState(false);
  
  // Refs for physics
  const lastX = useRef<number>(0);
  const lastTime = useRef<number>(0);
  const rotationSpeed = useRef<number>(0);
  const autoRotateTime = useRef<number>(0);

  // React Spring 
  const [{ scale }, springApi] = useSpring(() => ({
    scale: [1, 1, 1],
    config: {
      tension: physics.tension,
      friction: physics.friction,
      mass: physics.mass,
    },
  }));

  const getClientX = (event: PointerEvent | TouchEvent): number => {
    return 'touches' in event ? event.touches[0].clientX : event.clientX;
  };

  // Touching 
  const triggerHapticFeedback = useCallback((intensity: number = 50) => {
    if (interaction.enableHapticFeedback && 'vibrate' in navigator) {
      navigator.vibrate(intensity);
    }
  }, [interaction.enableHapticFeedback]);

  // Snap to the stage 
  const snapToNearestStage = useCallback((currentRotation: number) => {
    if (!enableMagneticSnap) return currentRotation;

    const stages = [
      { angle: 4.5, stage: 1 },
      { angle: 2.5, stage: 2 },
      { angle: 1.1, stage: 3 },
      { angle: 5.65, stage: 4 },
    ];

    const normalizedRotation = ((currentRotation % (2 * Math.PI)) + 2 * Math.PI) % (2 * Math.PI);
    
    let closestStage = stages[0];
    let minDistance = Math.abs(normalizedRotation - closestStage.angle);

    stages.forEach(stage => {
      const distance = Math.min(
        Math.abs(normalizedRotation - stage.angle),
        Math.abs(normalizedRotation - stage.angle + 2 * Math.PI),
        Math.abs(normalizedRotation - stage.angle - 2 * Math.PI)
      );
      
      if (distance < minDistance) {
        minDistance = distance;
        closestStage = stage;
      }
    });

    if (minDistance < 0.3) {
      triggerHapticFeedback(30);
      return closestStage.angle;
    }

    return currentRotation;
  }, [enableMagneticSnap, triggerHapticFeedback]);

  const calculateParallax = useCallback(() => {
    if (!enableParallax || !camera) return { x: 0, y: 0 };
    
    const mouse = new THREE.Vector2();
    return {
      x: mouse.x * 0.1,
      y: mouse.y * 0.1,
    };
  }, [enableParallax, camera]);

  // ================ Events Handling  ================
  const handlePointerEnter = useCallback(() => {
    setIsHovered(true);
    springApi.start({
      scale: [1.02, 1.02, 1.02],
      config: { tension: 300, friction: 10 },
    });
    triggerHapticFeedback(20);
  }, [springApi, triggerHapticFeedback]);

  const handlePointerLeave = useCallback(() => {
    setIsHovered(false);
    if (!isDragging) {
      springApi.start({
        scale: [1, 1, 1],
        config: { tension: 300, friction: 10 },
      });
    }
  }, [springApi, isDragging]);

  const handlePointerDown = useCallback((event: PointerEvent) => {
    event.stopPropagation();
    event.preventDefault();
    
    setIsRotating(true);
    setIsDragging(true);
    
    triggerHapticFeedback(80);
    
    lastTime.current = performance.now();
    lastX.current = getClientX(event);

    springApi.start({
      scale: [0.98, 0.98, 0.98],
      config: { tension: 400, friction: 8 },
    });
  }, [setIsRotating, springApi, triggerHapticFeedback]);

  const handlePointerUp = useCallback((event: PointerEvent) => {
    event.stopPropagation();
    event.preventDefault();
    
    setIsRotating(false);
    setIsDragging(false);
    
    springApi.start({
      scale: isHovered ? [1.02, 1.02, 1.02] : [1, 1, 1],
      config: { tension: 300, friction: 10 },
    });

    if (islandRef.current && enableMagneticSnap) {
      const currentRotation = islandRef.current.rotation.y;
      const snappedRotation = snapToNearestStage(currentRotation);
      
      if (Math.abs(snappedRotation - currentRotation) > 0.1) {
        // 使用 Three.js 直接设置旋转而不是 Spring 动画
        // 因为我们已经在手动控制旋转
        if (islandRef.current) {
          islandRef.current.rotation.y = snappedRotation;
        }
      }
    }
  }, [setIsRotating, springApi, isHovered, enableMagneticSnap, snapToNearestStage]);

  const handlePointerMove = useCallback((event: PointerEvent) => {
    event.stopPropagation();
    event.preventDefault();
    
    if (isRotating && islandRef.current) {
      const clientX = getClientX(event);
      
      const delta = (clientX - lastX.current) / viewport.width;
      
      const rotationDelta = delta * interaction.sensitivity * Math.PI;
      
      islandRef.current.rotation.y += rotationDelta;
      
      rotationSpeed.current = rotationDelta;
      
      lastX.current = clientX;
      
      if (enableParallax) {
        const parallax = calculateParallax();
        if (islandRef.current) {
          islandRef.current.position.x = parallax.x;
          islandRef.current.position.z = parallax.y;
        }
      }
    }
  }, [isRotating, viewport.width, interaction.sensitivity, enableParallax, calculateParallax]);

  // Handle keydown events
  const handleKeyDown = useCallback((event: KeyboardEvent) => {
    if (!islandRef.current) return;

    if (event.key === "ArrowLeft") {
      if (!isRotating) setIsRotating(true);

      islandRef.current.rotation.y += 0.005 * Math.PI;
      rotationSpeed.current = 0.007;
    } else if (event.key === "ArrowRight") {
      if (!isRotating) setIsRotating(true);

      islandRef.current.rotation.y -= 0.005 * Math.PI;
      rotationSpeed.current = -0.007;
    }
  }, [isRotating, setIsRotating]);

  // Handle keyup events
  const handleKeyUp = useCallback((event: KeyboardEvent) => {
    if (event.key === "ArrowLeft" || event.key === "ArrowRight") {
      setIsRotating(false);
    }
  }, [setIsRotating]);

  // Touch events for mobile devices
  const handleTouchStart = useCallback((e: TouchEvent) => {
    e.stopPropagation();
    e.preventDefault();
    setIsRotating(true);

    const clientX = getClientX(e);
    lastX.current = clientX;
  }, [setIsRotating]);

  const handleTouchEnd = useCallback((e: TouchEvent) => {
    e.stopPropagation();
    e.preventDefault();
    setIsRotating(false);
  }, [setIsRotating]);

  const handleTouchMove = useCallback((e: TouchEvent) => {
    e.stopPropagation();
    e.preventDefault();

    if (isRotating && islandRef.current) {
      const clientX = getClientX(e);
      const delta = (clientX - lastX.current) / viewport.width;

      islandRef.current.rotation.y += delta * 0.01 * Math.PI;
      lastX.current = clientX;
      rotationSpeed.current = delta * 0.01 * Math.PI;
    }
  }, [isRotating, viewport.width]);

  // ================ Listening for those events ================
  useEffect(() => {
    // Add event listeners for pointer and keyboard events
    const canvas = gl.domElement;
    canvas.addEventListener("pointerdown", handlePointerDown as EventListener);
    canvas.addEventListener("pointerup", handlePointerUp as EventListener);
    canvas.addEventListener("pointermove", handlePointerMove as EventListener);
    window.addEventListener("keydown", handleKeyDown as EventListener);
    window.addEventListener("keyup", handleKeyUp as EventListener);
    canvas.addEventListener("touchstart", handleTouchStart as EventListener);
    canvas.addEventListener("touchend", handleTouchEnd as EventListener);
    canvas.addEventListener("touchmove", handleTouchMove as EventListener);

    // Remove event listeners when component unmounts
    return () => {
      canvas.removeEventListener("pointerdown", handlePointerDown as EventListener);
      canvas.removeEventListener("pointerup", handlePointerUp as EventListener);
      canvas.removeEventListener("pointermove", handlePointerMove as EventListener);
      window.removeEventListener("keydown", handleKeyDown as EventListener);
      window.removeEventListener("keyup", handleKeyUp as EventListener);
      canvas.removeEventListener("touchstart", handleTouchStart as EventListener);
      canvas.removeEventListener("touchend", handleTouchEnd as EventListener);
      canvas.removeEventListener("touchmove", handleTouchMove as EventListener);
    };
  }, [
    gl,
    handlePointerDown,
    handlePointerUp,
    handlePointerMove,
    handleKeyDown,
    handleKeyUp,
    handleTouchStart,
    handleTouchEnd,
    handleTouchMove,
  ]);

  // Unity: Update() | Godot: _process(delta) | Unreal: Tick()
  useFrame((_, delta) => {
    if (!islandRef.current) return;
    if (enableAutoRotate && !isRotating && !isDragging) {
      autoRotateTime.current += delta;
      const autoRotation = Math.sin(autoRotateTime.current * interaction.autoRotateSpeed) * 0.1;
      islandRef.current.rotation.y += autoRotation * delta;
    }

    if (!isRotating && !isDragging) {
      const dampingForce = physics.damping * (1 - physics.mass * 0.1);
      rotationSpeed.current *= dampingForce;

      if (Math.abs(rotationSpeed.current) < physics.precision) {
        rotationSpeed.current = 0;
      }

      islandRef.current.rotation.y += rotationSpeed.current * delta * 60; // 60fps 标准化
    } else {
      const rotation = islandRef.current.rotation.y;

      /**
       * Normalize the rotation value to ensure it stays within the range [0, 2 * Math.PI].
       * The goal is to ensure that the rotation value remains within a specific range to
       * prevent potential issues with very large or negative rotation values.
       *  Here's a step-by-step explanation of what this code does:
       *  1. rotation % (2 * Math.PI) calculates the remainder of the rotation value when divided
       *     by 2 * Math.PI. This essentially wraps the rotation value around once it reaches a
       *     full circle (360 degrees) so that it stays within the range of 0 to 2 * Math.PI.
       *  2. (rotation % (2 * Math.PI)) + 2 * Math.PI adds 2 * Math.PI to the result from step 1.
       *     This is done to ensure that the value remains positive and within the range of
       *     0 to 2 * Math.PI even if it was negative after the modulo operation in step 1.
       *  3. Finally, ((rotation % (2 * Math.PI)) + 2 * Math.PI) % (2 * Math.PI) applies another
       *     modulo operation to the value obtained in step 2. This step guarantees that the value
       *     always stays within the range of 0 to 2 * Math.PI, which is equivalent to a full
       *     circle in radians.
       */
      const normalizedRotation =
        ((rotation % (2 * Math.PI)) + 2 * Math.PI) % (2 * Math.PI);

      // Set the current stage based on the island's orientation
      switch (true) {
        case normalizedRotation >= 5.45 && normalizedRotation <= 5.85:
          setCurrentStage(4);
          break;
        case normalizedRotation >= 0.85 && normalizedRotation <= 1.3:
          setCurrentStage(3);
          break;
        case normalizedRotation >= 2.4 && normalizedRotation <= 2.6:
          setCurrentStage(2);
          break;
        case normalizedRotation >= 4.25 && normalizedRotation <= 4.75:
          setCurrentStage(1);
          break;
        default:
          setCurrentStage(null);
      }
    }
  });

  // ================ 3D Rendering  ================
  return (
    <a.group 
      ref={islandRef} 
      {...props}
      // React Spring 动画属性 - 只用于缩放效果
      // @ts-expect-error - React Spring 类型兼容性问题
      scale={scale}
      onPointerEnter={handlePointerEnter}
      onPointerLeave={handlePointerLeave}
    >
      <mesh
        geometry={nodes.polySurface944_tree_body_0.geometry}
        material={materials.PaletteMaterial001}
      />
      <mesh
        geometry={nodes.polySurface945_tree1_0.geometry}
        material={materials.PaletteMaterial001}
      />
      <mesh
        geometry={nodes.polySurface946_tree2_0.geometry}
        material={materials.PaletteMaterial001}
      />
      <mesh
        geometry={nodes.polySurface947_tree1_0.geometry}
        material={materials.PaletteMaterial001}
      />
      <mesh
        geometry={nodes.polySurface948_tree_body_0.geometry}
        material={materials.PaletteMaterial001}
      />
      <mesh
        geometry={nodes.polySurface949_tree_body_0.geometry}
        material={materials.PaletteMaterial001}
      />
      <mesh
        geometry={nodes.pCube11_rocks1_0.geometry}
        material={materials.PaletteMaterial001}
      />
    </a.group>
  );
}

// Preload the GLTF model
useGLTF.preload("/island-transformed.glb");
