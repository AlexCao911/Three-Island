/**
 * IMPORTANT: Loading glTF models into a Three.js scene is a lot of work.
 * Before we can configure or animate our model's meshes, we need to iterate through
 * each part of our model's meshes and save them separately.
 *
 * But luckily there is an app that turns gltf or glb files into jsx components
 * For this model, visit https://gltf.pmnd.rs/
 * And get the code. And then add the rest of the things.
 * YOU DON'T HAVE TO WRITE EVERYTHING FROM SCRATCH
 */

/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 bird.glb -T --types
Author: NORBERTO-3D (https://sketchfab.com/norberto3d)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/phoenix-bird-844ba0cf144a413ea92c779f18912042
Title: phoenix bird
*/

import { useRef, useEffect } from 'react'
import { useFrame } from '@react-three/fiber'
import { useGLTF, useAnimations } from '@react-three/drei'
import * as THREE from 'three'

interface BirdProps {
    position?: [number, number, number]
    rotation?: [number, number, number]
    scale?: [number, number, number] | number
}

// 3D Model from: https://sketchfab.com/3d-models/phoenix-bird-844ba0cf144a413ea92c779f18912042
export function Bird(props: BirdProps) {
    const birdRef = useRef<THREE.Mesh>(null);

    // Load the 3D model and animations from the provided GLTF file
    const { scene, animations } = useGLTF('/assets/3d/transformed/bird-transformed.glb')

    // Get access to the animations for the bird
    const { actions } = useAnimations(animations, birdRef);

    // Play the "Take 001" animation when the component mounts
    // Note: Animation names can be found on the Sketchfab website where the 3D model is hosted.
    useEffect(() => {
        actions['Take 001']?.play();
    }, [actions]);

    useFrame(({ clock, camera }) => {
        if (!birdRef.current) return;

        // Update the Y position to simulate bird-like motion using a sine wave
        birdRef.current.position.y = Math.sin(clock.elapsedTime) * 0.2 + 2;

        // Check if the bird reached a certain endpoint relative to the camera
        if (birdRef.current.position.x > camera.position.x + 10) {
            // Change direction to backward and rotate the bird 180 degrees on the y-axis
            birdRef.current.rotation.y = Math.PI;
        } else if (birdRef.current.position.x < camera.position.x - 10) {
            // Change direction to forward and reset the bird's rotation
            birdRef.current.rotation.y = 0;
        }

        // Update the X and Z positions based on the direction
        if (birdRef.current.rotation.y === 0) {
            // Moving forward
            birdRef.current.position.x += 0.01;
            birdRef.current.position.z -= 0.01;
        } else {
            // Moving backward
            birdRef.current.position.x -= 0.01;
            birdRef.current.position.z += 0.01;
        }
    });

    return (
        // Create a mesh to contain the bird - using Reference values for position and scale
        <mesh
            ref={birdRef}
            position={[-5, 2, 1]}
            scale={[0.003, 0.003, 0.003]}
            {...props}
        >
            {/* Use the primitive element to directly embed the 3D model */}
            <primitive object={scene} />
        </mesh>
    )
}

// Preload the bird model to improve performance
useGLTF.preload('/assets/3d/transformed/bird-transformed.glb')

export default Bird