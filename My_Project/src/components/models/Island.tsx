/**
 * IMPORTANT: Loading glTF models into a Three.js scene is a lot of work.
 * Before we can configure or animate our model's meshes, we need to iterate through
 * each part of our model's meshes and save them separately.
 *
 * But luckily there is an app that turns gltf or glb files into jsx components
 * For this model, visit https://gltf.pmnd.rs/
 * And get the code. And then add the rest of the things.
 * YOU DON'T HAVE TO WRITE EVERYTHING FROM SCRATCH
 */

/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 island.glb -T --types
Author: nimzu (https://sketchfab.com/nimzuk)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/foxs-islands-163b68e09fcc47618450150be7785907
Title: Fox's islands
*/
import { useGLTF } from '@react-three/drei'
import { useRef, useEffect, useCallback } from 'react'
import { useFrame, useThree } from '@react-three/fiber'
import { a } from '@react-spring/three'
import * as THREE from 'three'

interface IslandProps {
  position?: [number, number, number]
  rotation?: [number, number, number]
  scale?: [number, number, number]
  isRotating?: boolean
  setIsRotating?: (rotating: boolean) => void
  setCurrentStage?: (stage: number | null) => void
}

// Island 3D model from: https://sketchfab.com/3d-models/foxs-islands-163b68e09fcc47618450150be7785907
export function Island({
  isRotating,
  setIsRotating,
  setCurrentStage,
  ...props
}: IslandProps) {
  // Create a reference to the island group for direct manipulation
  const islandRef = useRef<THREE.Group>(null);

  // Get access to the Three.js renderer and viewport
  const { gl, viewport } = useThree();

  // Load the 3D model from the provided GLTF file
  const { nodes, materials } = useGLTF('/assets/3d/transformed/island-transformed.glb')

  // Use a ref for the last mouse x position
  const lastX = useRef(0);

  // Use a ref for rotation speed
  const rotationSpeed = useRef(0);

  // Define a damping factor to control rotation damping
  const dampingFactor = 0.95;

  // Handle pointer (mouse or touch) down event
  const handlePointerDown = useCallback((event: PointerEvent) => {
    event.stopPropagation();
    event.preventDefault();
    if (setIsRotating) setIsRotating(true);

    // Calculate the clientX based on whether it's a touch event or a mouse event
    const clientX = event.clientX;
    lastX.current = clientX;
  }, [setIsRotating]);

  // Handle pointer (mouse or touch) up event
  const handlePointerUp = useCallback((event: PointerEvent) => {
    event.stopPropagation();
    event.preventDefault();
    if (setIsRotating) setIsRotating(false);
  }, [setIsRotating]);

  // Handle pointer (mouse or touch) move event
  const handlePointerMove = useCallback((event: PointerEvent) => {
    event.stopPropagation();
    event.preventDefault();

    if (isRotating && islandRef.current) {
      // Calculate the change in the horizontal position of the mouse cursor or touch input,
      // relative to the viewport's width
      const clientX = event.clientX;
      const delta = (clientX - lastX.current) / viewport.width;

      // Update the island's rotation based on the mouse/touch movement
      islandRef.current.rotation.y += delta * 0.01 * Math.PI;

      // Update the reference for the last clientX position
      lastX.current = clientX;

      // Update the rotation speed
      rotationSpeed.current = delta * 0.01 * Math.PI;
    }
  }, [isRotating, viewport.width]);

  // Handle keydown events
  const handleKeyDown = useCallback((event: KeyboardEvent) => {
    if (event.key === "ArrowLeft") {
      if (!isRotating && setIsRotating) setIsRotating(true);
      if (islandRef.current) {
        islandRef.current.rotation.y += 0.005 * Math.PI;
        rotationSpeed.current = 0.007;
      }
    } else if (event.key === "ArrowRight") {
      if (!isRotating && setIsRotating) setIsRotating(true);
      if (islandRef.current) {
        islandRef.current.rotation.y -= 0.005 * Math.PI;
        rotationSpeed.current = -0.007;
      }
    }
  }, [isRotating, setIsRotating]);

  // Handle keyup events
  const handleKeyUp = useCallback((event: KeyboardEvent) => {
    if (event.key === "ArrowLeft" || event.key === "ArrowRight") {
      if (setIsRotating) setIsRotating(false);
    }
  }, [setIsRotating]);

  // Touch events for mobile devices
  const handleTouchStart = useCallback((event: TouchEvent) => {
    event.stopPropagation();
    event.preventDefault();
    if (setIsRotating) setIsRotating(true);

    const clientX = event.touches ? event.touches[0].clientX : 0;
    lastX.current = clientX;
  }, [setIsRotating]);

  const handleTouchEnd = useCallback((event: TouchEvent) => {
    event.stopPropagation();
    event.preventDefault();
    if (setIsRotating) setIsRotating(false);
  }, [setIsRotating]);

  const handleTouchMove = useCallback((event: TouchEvent) => {
    event.stopPropagation();
    event.preventDefault();

    if (isRotating && islandRef.current) {
      const clientX = event.touches ? event.touches[0].clientX : 0;
      const delta = (clientX - lastX.current) / viewport.width;

      islandRef.current.rotation.y += delta * 0.01 * Math.PI;
      lastX.current = clientX;
      rotationSpeed.current = delta * 0.01 * Math.PI;
    }
  }, [isRotating, viewport.width]);

  useEffect(() => {
    // Add event listeners for pointer and keyboard events
    const canvas = gl.domElement;
    canvas.addEventListener('pointerdown', handlePointerDown);
    canvas.addEventListener('pointerup', handlePointerUp);
    canvas.addEventListener('pointermove', handlePointerMove);
    window.addEventListener('keydown', handleKeyDown);
    window.addEventListener('keyup', handleKeyUp);
    canvas.addEventListener('touchstart', handleTouchStart);
    canvas.addEventListener('touchend', handleTouchEnd);
    canvas.addEventListener('touchmove', handleTouchMove);

    // Remove event listeners when component unmounts
    return () => {
      canvas.removeEventListener('pointerdown', handlePointerDown);
      canvas.removeEventListener('pointerup', handlePointerUp);
      canvas.removeEventListener('pointermove', handlePointerMove);
      window.removeEventListener('keydown', handleKeyDown);
      window.removeEventListener('keyup', handleKeyUp);
      canvas.removeEventListener('touchstart', handleTouchStart);
      canvas.removeEventListener('touchend', handleTouchEnd);
      canvas.removeEventListener('touchmove', handleTouchMove);
    };
  }, [gl, handlePointerDown, handlePointerUp, handlePointerMove, handleKeyDown, handleKeyUp, handleTouchStart, handleTouchEnd, handleTouchMove]);

  // This function is called on each frame update
  useFrame(() => {
    // If not rotating, apply damping to slow down the rotation (smoothly)
    if (!isRotating && islandRef.current) {
      // Apply damping factor
      rotationSpeed.current *= dampingFactor;

      // Stop rotation when speed is very small
      if (Math.abs(rotationSpeed.current) < 0.001) {
        rotationSpeed.current = 0;
      }

      islandRef.current.rotation.y += rotationSpeed.current;
    } else if (islandRef.current) {
      // When rotating, determine the current stage based on island's orientation
      const rotation = islandRef.current.rotation.y;

      /**
       * Normalize the rotation value to ensure it stays within the range [0, 2 * Math.PI].
       * The goal is to ensure that the rotation value remains within a specific range to
       * prevent potential issues with very large or negative rotation values.
       *  Here's a step-by-step explanation of what this code does:
       *  1. rotation % (2 * Math.PI) calculates the remainder of the rotation value when divided
       *     by 2 * Math.PI. This essentially wraps the rotation value around once it reaches a
       *     full circle (360 degrees) so that it stays within the range of 0 to 2 * Math.PI.
       *  2. (rotation % (2 * Math.PI)) + 2 * Math.PI adds 2 * Math.PI to the result from step 1.
       *     This is done to ensure that the value remains positive and within the range of
       *     0 to 2 * Math.PI even if it was negative after the modulo operation in step 1.
       *  3. Finally, ((rotation % (2 * Math.PI)) + 2 * Math.PI) % (2 * Math.PI) applies another
       *     modulo operation to the value obtained in step 2. This step guarantees that the value
       *     always stays within the range of 0 to 2 * Math.PI, which is equivalent to a full
       *     circle in radians.
       */
      const normalizedRotation = ((rotation % (2 * Math.PI)) + 2 * Math.PI) % (2 * Math.PI);

      // Set the current stage based on the island's orientation
      if (setCurrentStage) {
        switch (true) {
          case normalizedRotation >= 5.45 && normalizedRotation <= 5.85:
            setCurrentStage(4);
            break;
          case normalizedRotation >= 0.85 && normalizedRotation <= 1.3:
            setCurrentStage(3);
            break;
          case normalizedRotation >= 2.4 && normalizedRotation <= 2.6:
            setCurrentStage(2);
            break;
          case normalizedRotation >= 4.25 && normalizedRotation <= 4.75:
            setCurrentStage(1);
            break;
          default:
            setCurrentStage(null);
        }
      }
    }
  });

  return (
    // Island 3D model from: https://sketchfab.com/3d-models/foxs-islands-163b68e09fcc47618450150be7785907
    <a.group ref={islandRef} {...props}>
      {/* Tree meshes - individual mesh components for each tree type */}
      <mesh
        geometry={(nodes.polySurface944_tree_body_0 as THREE.Mesh).geometry}
        material={materials.PaletteMaterial001}
      />
      <mesh
        geometry={(nodes.polySurface945_tree1_0 as THREE.Mesh).geometry}
        material={materials.PaletteMaterial001}
      />
      <mesh
        geometry={(nodes.polySurface946_tree2_0 as THREE.Mesh).geometry}
        material={materials.PaletteMaterial001}
      />
      <mesh
        geometry={(nodes.polySurface947_tree1_0 as THREE.Mesh).geometry}
        material={materials.PaletteMaterial001}
      />
      <mesh
        geometry={(nodes.polySurface948_tree_body_0 as THREE.Mesh).geometry}
        material={materials.PaletteMaterial001}
      />
      <mesh
        geometry={(nodes.polySurface949_tree_body_0 as THREE.Mesh).geometry}
        material={materials.PaletteMaterial001}
      />
      {/* Main island rock base */}
      <mesh
        geometry={(nodes.pCube11_rocks1_0 as THREE.Mesh).geometry}
        material={materials.PaletteMaterial001}
      />
    </a.group>
  )
}

// Preload the island model to improve performance
useGLTF.preload('/assets/3d/transformed/island-transformed.glb')

export default Island